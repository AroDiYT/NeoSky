/*jslint bitwise: true */
'use strict';
// import
var Layer = require('./layer');
var Network = require('./network');
var Trainer = require('./trainer');
/*******************************************************************************************
                                        ARCHITECT
*******************************************************************************************/
// Colection of useful built-in architectures
var Architect = {
    // Multilayer Perceptron
    Perceptron: function Perceptron() {
        var args = Array.prototype.slice.call(arguments);
        // convert arguments to Array
        if (args.length < 3) {
            throw new Error('not enough layers (minimum 3) !!');
        }
        var inputs = args.shift();
        // first argument
        var outputs = args.pop();
        // last argument
        var layers = args;
        // all the arguments in the middle
        var input = new Layer(inputs);
        var hidden = [];
        var output = new Layer(outputs);
        var previous = input;
        // generate hidden layers
        var level;
        var size;
        var layer;
        for (level in layers) {
            if (layers.hasOwnProperty(level)) {
                size = layers[level];
                layer = new Layer(size);
                hidden.push(layer);
                previous.project(layer);
                previous = layer;
            }
        }
        previous.project(output);
        // set layers of the neural network
        this.set({
            input: input,
            hidden: hidden,
            output: output
        });
        // trainer for the network
        this.trainer = new Trainer(this);
    },
    // Multilayer Long Short-Term Memory
    LSTM: function LSTM() {
        var args = Array.prototype.slice.call(arguments);
        // convert arguments to array
        if (args.length < 3) {
            throw new Error('not enough layers (minimum 3) !!');
        }
        var last = args.pop();
        var option = {
            peepholes: Layer.connectionType.ALL_TO_ALL,
            hiddenToHidden: false,
            outputToHidden: false,
            outputToGates: false,
            inputToOutput: true
        };
        var outputs;
        if (typeof last !== 'number') {
            outputs = args.pop();
            if (last.hasOwnProperty('peepholes')) {
                option.peepholes = last.peepholes;
            }
            if (last.hasOwnProperty('hiddenToHidden')) {
                option.hiddenToHidden = last.hiddenToHidden;
            }
            if (last.hasOwnProperty('outputToHidden')) {
                option.outputToHidden = last.outputToHidden;
            }
            if (last.hasOwnProperty('outputToGates')) {
                option.outputToGates = last.outputToGates;
            }
            if (last.hasOwnProperty('inputToOutput')) {
                option.inputToOutput = last.inputToOutput;
            }
        } else {
            outputs = last;
        }
        var inputs = args.shift();
        var layers = args;
        var inputLayer = new Layer(inputs);
        var hiddenLayers = [];
        var outputLayer = new Layer(outputs);
        var previous = null;
        // generate layers
        var layer;
        var size;
        var forgetGate;
        var inputGate;
        var memoryCell;
        var outputGate;
        var input;
        var output;
        var self;
        var cell;
        for (layer in layers) {
            if (layers.hasOwnProperty(layer)) {
                // generate memory blocks (memory cell and respective gates)
                size = layers[layer];
                inputGate = new Layer(size).set({
                    bias: 1
                });
                forgetGate = new Layer(size).set({
                    bias: 1
                });
                memoryCell = new Layer(size);
                outputGate = new Layer(size).set({
                    bias: 1
                });
                hiddenLayers.push(inputGate);
                hiddenLayers.push(forgetGate);
                hiddenLayers.push(memoryCell);
                hiddenLayers.push(outputGate);
                // connections from input layer
                input = inputLayer.project(memoryCell);
                inputLayer.project(inputGate);
                inputLayer.project(forgetGate);
                inputLayer.project(outputGate);
                // connections from previous memory-block layer to this one
                if (previous !== null) {
                    cell = previous.project(memoryCell);
                    previous.project(inputGate);
                    previous.project(forgetGate);
                    previous.project(outputGate);
                }
                // connections from memory cell
                output = memoryCell.project(outputLayer);
                // self-connection
                self = memoryCell.project(memoryCell);
                // hidden to hidden recurrent connection
                if (option.hiddenToHidden) {
                    memoryCell.project(memoryCell, Layer.connectionType.ALL_TO_ELSE);
                }
                // out to hidden recurrent connection
                if (option.outputToHidden) {
                    outputLayer.project(memoryCell);
                }
                // out to gates recurrent connection
                if (option.outputToGates) {
                    outputLayer.project(inputGate);
                    outputLayer.project(outputGate);
                    outputLayer.project(forgetGate);
                }
                // peepholes
                memoryCell.project(inputGate, option.peepholes);
                memoryCell.project(forgetGate, option.peepholes);
                memoryCell.project(outputGate, option.peepholes);
                // gates
                inputGate.gate(input, Layer.gateType.INPUT);
                forgetGate.gate(self, Layer.gateType.ONE_TO_ONE);
                outputGate.gate(output, Layer.gateType.OUTPUT);
                if (previous !== null) {
                    inputGate.gate(cell, Layer.gateType.INPUT);
                }
                previous = memoryCell;
            }
        }
        // input to output direct connection
        if (option.inputToOutput) {
            inputLayer.project(outputLayer);
        }
        // set the layers of the neural network
        this.set({
            input: inputLayer,
            hidden: hiddenLayers,
            output: outputLayer
        });
        // trainer
        this.trainer = new Trainer(this);
    },
    // Liquid State Machine
    Liquid: function Liquid(inputs, hidden, outputs, connections, gates) {
        // create layers
        var inputLayer = new Layer(inputs);
        var hiddenLayer = new Layer(hidden);
        var outputLayer = new Layer(outputs);
        // make connections and gates randomly among the neurons
        var neurons = hiddenLayer.neurons();
        var connectionList = [];
        var i;
        var from;
        var to;
        var connection;
        for (i = 0; i < connections; i = i + 1) {
            // connect two random neurons
            from = Math.random() * neurons.length | 0;
            to = Math.random() * neurons.length | 0;
            connection = neurons[from].project(neurons[to]);
            connectionList.push(connection);
        }
        var j;
        var gater;
        for (j = 0; j < gates; j = j + 1) {
            // pick a random gater neuron
            gater = Math.random() * neurons.length | 0;
            // pick a random connection to gate
            connection = Math.random() * connectionList.length | 0;
            // let the gater gate the connection
            neurons[gater].gate(connectionList[connection]);
        }
        // connect the layers
        inputLayer.project(hiddenLayer);
        hiddenLayer.project(outputLayer);
        // set the layers of the network
        this.set({
            input: inputLayer,
            hidden: [hiddenLayer],
            output: outputLayer
        });
        // trainer
        this.trainer = new Trainer(this);
    },
    Hopfield: function Hopfield(size) {
        var inputLayer = new Layer(size);
        var outputLayer = new Layer(size);
        inputLayer.project(outputLayer, Layer.connectionType.ALL_TO_ALL);
        this.set({
            input: inputLayer,
            hidden: [],
            output: outputLayer
        });
        var trainer = new Trainer(this);
        var proto = Architect.Hopfield.prototype;
        proto.learn = proto.learn || function (patterns) {
            var set = [];
            var p;
            for (p in patterns) {
                if (patterns.hasOwnProperty(p)) {
                    set.push({
                        input: patterns[p],
                        output: patterns[p]
                    });
                }
            }
            return trainer.train(set, {
                iterations: 500000,
                error: 0.00005,
                rate: 1
            });
        };
        proto.feed = proto.feed || function (pattern) {
            var output = this.activate(pattern);
            pattern = [];
            var i;
            for (i in output) {
                if (output.hasOwnProperty(i)) {
                    pattern[i] = output[i] > 0.5 ? 1 : 0;
                }
            }
            return pattern;
        };
    }
};
// Extend prototype chain (so every architectures is an instance of Network)
var architecture;
for (architecture in Architect) {
    if (Architect.hasOwnProperty(architecture)) {
        Architect[architecture].prototype = new Network();
        Architect[architecture].prototype.constructor = Architect[architecture];
    }
}
// export
if (module) {
    module.exports = Architect;
}